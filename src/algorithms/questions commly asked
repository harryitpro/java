1. Data Structures & Algorithms
Arrays & Strings
Two Sum

Given an array of integers, return indices of the two numbers that add up to a specific target.

public int[] twoSum(int[] nums, int target) {
    Map<Integer, Integer> map = new HashMap<>();
    for (int i = 0; i < nums.length; i++) {
        int complement = target - nums[i];
        if (map.containsKey(complement)) {
            return new int[]{map.get(complement), i};
        }
        map.put(nums[i], i);
    }
    return new int[]{};
}
Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.
Example: "abcabcbb" → 3 ("abc")
Solution: Use Sliding Window.
Linked Lists
Reverse a Linked List

Reverse a singly linked list.
Solution: Use iteration or recursion.
Example (Java):
java
Copy
Edit
public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode current = head;
    while (current != null) {
        ListNode next = current.next;
        current.next = prev;
        prev = current;
        current = next;
    }
    return prev;
}
Detect a Cycle in a Linked List

Use Floyd’s Cycle Detection Algorithm (slow & fast pointers).
Stacks & Queues
Valid Parentheses

Given a string with ()[]{}, check if it's valid.
Solution: Use Stack.
Implement LRU Cache

Use HashMap + Doubly Linked List.
Trees & Graphs
Binary Tree Level Order Traversal

Solution: Use BFS (Queue).
Find the Lowest Common Ancestor (LCA)

Given a BST and two nodes, find their lowest common ancestor.
Dijkstra’s Algorithm

Find the shortest path in a graph using PriorityQueue.
Dynamic Programming (DP)
Climbing Stairs (f(n) = f(n-1) + f(n-2))
Longest Common Subsequence (LCS)
2. SQL & Database
Find the second-highest salary
sql
Copy
Edit
SELECT MAX(salary)
FROM Employee
WHERE salary < (SELECT MAX(salary) FROM Employee);
Find duplicate records in a table
sql
Copy
Edit
SELECT name, COUNT(*)
FROM Employee
GROUP BY name
HAVING COUNT(*) > 1;
3. System Design (For Experienced Candidates)
Design a URL Shortener (like Bit.ly)
Design a Banking Transaction System
Design a Load Balancer

/**
 * 1. Coding Questions (DSA & Java)
 *
 * Array & String
 * Find all contiguous subarrays of an array.
 * Find the maximum subarray sum (Kadane’s Algorithm).
 * Find duplicate numbers in an array.
 * Implement two sum problem.
 * Merge two sorted arrays without extra space.
 * Linked List
 * Detect a cycle in a linked list (Floyd’s Cycle Detection).
 * Reverse a linked list.
 * Merge two sorted linked lists.
 * Find middle node of a linked list.
 * Stack & Queue
 * Implement a Min Stack (stack that returns min in O(1)).
 * Implement a Queue using Stack.
 * Next greater element in an array.
 * LRU Cache implementation.
 * Tree & Graph
 * Find Lowest Common Ancestor (LCA) of a Binary Tree.
 * Serialize and Deserialize a Binary Tree.
 * Implement Graph BFS & DFS.
 * Find shortest path in a graph (Dijkstra).
 * Dynamic Programming (DP)
 * Find the longest increasing subsequence.
 * Find the maximum profit from buying and selling stocks.
 * Find the number of ways to climb stairs.
 * Knapsack 0/1 problem.
 * 2. Java & OOP Concepts
 * Difference between HashMap and ConcurrentHashMap.
 * How HashMap works internally?
 * Java Memory Management (Heap, Stack, GC)
 * Multithreading: Implement Producer-Consumer using BlockingQueue
 * Explain volatile, synchronized, and locks in Java.
 * Difference between abstract class and interface.
 * SOLID principles with examples.
 * Why String is immutable in Java?
 * Thread safety in Singleton Design Pattern.
 * How to create an immutable class in Java?
 * 3. System Design Questions
 * For experienced candidates, system design questions focus on high-level architecture.
 *
 * Design eBay’s search engine (handling millions of queries).
 * Design a URL Shortener like Bitly.
 * Design a scalable chat system (WhatsApp, Messenger).
 * Design a distributed caching system.
 * How to handle high-traffic API requests efficiently?
 * Design an online auction system like eBay.
 * 4. SQL & Database Questions
 * Find the 2nd highest salary from an Employee table.
 * Explain ACID properties.
 * Difference between SQL and NoSQL databases.
 * How to optimize SQL queries?
 * Implement a JOIN query to fetch related records.
 * How does indexing work?
 * 5. Behavioral & HR Questions
 * Why do you want to join eBay?
 * Tell me about a challenging project you worked on.
 * Describe a time you solved a difficult problem.
 * How do you handle conflicts in a team?
 * How do you prioritize tasks under tight deadlines?
 * What do you know about eBay’s products & business model?
 * Preparation Tips
 * ✅ DSA Practice: Leetcode (Medium/Hard)
 * ✅ Java & Multithreading: Deep dive into Concurrency, Collections
 * ✅ System Design: Read "Designing Data-Intensive Applications"
 * ✅ Mock Interviews: Practice live coding
 */